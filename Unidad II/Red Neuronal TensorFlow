import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import precision_score, recall_score, f1_score
import tensorflow as tf
import time

# Cargar el dataset
data = pd.read_csv('iris.csv')
X = data.drop('Species', axis=1).values
y = data['Species'].values

# Convertir las etiquetas a índices
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Dividir los datos en entrenamiento, validación y prueba
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Definir el modelo con dropout
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, input_shape=(4,), activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

# Compilar el modelo
optimizer = tf.keras.optimizers.Adam(learning_rate=0.000001)
model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Entrenar el modelo
epochs = 100
batch_size = 16
start_time = time.time()
history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_val, y_val), verbose=0)
epoch_time = time.time() - start_time

# Evaluar el modelo
val_loss, val_accuracy = model.evaluate(X_val, y_val, verbose=0)
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)
val_preds = np.argmax(model.predict(X_val), axis=-1)
test_preds = np.argmax(model.predict(X_test), axis=-1)
val_precision = precision_score(y_val, val_preds, average='weighted', zero_division=1)
val_recall = recall_score(y_val, val_preds, average='weighted')
val_f1 = f1_score(y_val, val_preds, average='weighted')
test_precision = precision_score(y_test, test_preds, average='weighted', zero_division=1)
test_recall = recall_score(y_test, test_preds, average='weighted')
test_f1 = f1_score(y_test, test_preds, average='weighted')

# Imprimir resultados
print(f'Tiempo total de entrenamiento: {epoch_time:.2f} seg')
print(f'Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.4f}, Val Precision: {val_precision:.4f}, Val Recall: {val_recall:.4f}, Val F1: {val_f1:.4f}')
print(f'Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}, Test Precision: {test_precision:.4f}, Test Recall: {test_recall:.4f}, Test F1: {test_f1:.4f}')
